#version 400

in vec3 MCvertex;
in vec3 MCvertexColor;

out vec4 vertexColor;

uniform mat4 PMatrix;
uniform mat4 MVMatrix;

uniform double scaleFactorX;
uniform double scaleFactorY;
uniform double scaleFactorZ;
uniform double offsetX;
uniform double offsetY;
uniform double offsetZ;
uniform double minX;
uniform double minY;
uniform double minZ;
uniform double diffX;

uniform float hue;
uniform float saturation;

uniform vec3 cameraPos;

void RGBtoHSV( inout vec3 color ) {
	float r = color.r;
	float g = color.g;
	float b = color.b;
	float h,s,v;
	
	float min, max, delta;
	min = r;
    if (g < min) {
        min = g;
    }
    if (b < min) {
        min = b;
    }

    max = r;
    if (g > max) {
        max = g;
    }
    if (b > max) {
        max = b;
    }
    
	v = max;				// v
	delta = max - min;
	if( max != 0 )
		s = delta / max;		// s
	else {
		// r = g = b = 0		// s = 0, v is undefined
		s = 0;
		h = -1;		
		
		color = vec3(h,s,v); 
		return;
	}
	if( r == max )
		h = ( g - b ) / delta;		// between yellow & magenta
	else if( g == max )
		h = 2 + ( b - r ) / delta;	// between cyan & yellow
	else
		h = 4 + ( r - g ) / delta;	// between magenta & cyan
	h *= 60;				// degrees
	if( h < 0 )
		h += 360;
				
	color = vec3(h,s,v); 
	return;
}

void HSVtoRGB( inout vec3 color ) {
	float h = color.r;
	float s = color.g;
	float v = color.b;
	float r,g,b;
	
	int i;
	float f, p, q, t;
	if( s == 0 ) {
		// achromatic (grey)
		r = g = b = v;
		
		color = vec3(r,g,b); 
		return;
	}
	h /= 60;			// sector 0 to 5
	i = int(floor( h ));
	f = h - i;			// factorial part of h
	p = v * ( 1 - s );
	q = v * ( 1 - s * f );
	t = v * ( 1 - s * ( 1 - f ) );
	
	switch( i ) {
		case 0:
			r = v;
			g = t;
			b = p;
			break;
		case 1:
			r = q;
			g = v;
			b = p;
			break;
		case 2:
			r = p;
			g = v;
			b = t;
			break;
		case 3:
			r = p;
			g = q;
			b = v;
			break;
		case 4:
			r = t;
			g = p;
			b = v;
			break;
		default:		// case 5:
			r = v;
			g = p;
			b = q;
			break;
	}
	
	color = vec3(r,g,b); 
	return;
}

void main() {
	//gl_PointSize = 3;
	
    //float processedX = float((((((MCvertex.x * scaleFactorX) + offsetX) - minX) / diffX) - 0.5) * 2.0);
    //float processedY = float((((((MCvertex.y * scaleFactorY) + offsetY) - minY) / diffX) - 0.5) * 2.0);
    //float processedZ = float(((((MCvertex.z * scaleFactorZ) + offsetZ) - minZ) / diffX) * 2.0);

    //float processedR = float(MCvertexColor.r / 255.0);
    //float processedG = float(MCvertexColor.g / 255.0);
    //float processedB = float(MCvertexColor.b / 255.0);
		
	//vertexColor = vec4(processedR, processedG, processedB, 1.0);
	
	//vec4 vertexPos = vec4(processedX, processedY, processedZ, 1.0);
    //gl_Position = PMatrix * MVMatrix * vertexPos;
	
	
	vec3 color = vec3(MCvertexColor.r ,MCvertexColor.g ,MCvertexColor.b);
	RGBtoHSV( color );
	color = vec3(color.r*hue, color.g*saturation, color.b);
	HSVtoRGB( color );
	
	vertexColor = vec4(color.r ,color.g ,color.b, 1.0);
	//vertexColor = vec4(1.0, 1.0, 1.0, 1.0);
    
    float dist = distance(cameraPos, (MVMatrix * vec4(MCvertex.xyz,1.0)).xyz);
    gl_PointSize = (1.0/(dist*dist)) * 12.0;
        
    gl_Position = PMatrix * MVMatrix * vec4(MCvertex.xyz,1.0);
}
